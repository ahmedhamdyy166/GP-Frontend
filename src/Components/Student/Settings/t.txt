import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../../Components/Tailwind/tailwind.css';
import './Settings.css';

const Settings = () => {
    const [userData, setUserData] = useState({
        firstName: '',
        lastName: '',
        email: '',
        address: '',
        bDate: '',
        password: ''
    });
    const [isEditing, setIsEditing] = useState(false);
    const [error, setError] = useState(null);
    const [message, setMessage] = useState('');

    useEffect(() => {
        fetchUserProfile();
    }, []);

    const fetchUserProfile = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await axios.get('http://127.0.0.1:4000/getUserData', {
                headers: { Authorization: `Bearer ${token}` }
            });

            if (response.data) {
                setUserData(response.data.data);
            } else {
                setError('User profile not found');
            }
        } catch (error) {
            setError('Failed to fetch user profile');
        }
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setUserData({ ...userData, [name]: value });
    };

    const handleFormSubmit = async (e) => {
        e.preventDefault();
        try {
            const token = localStorage.getItem('token');
            await axios.put('http://127.0.0.1:4000/editUser', userData, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setMessage('Profile updated successfully');
            setIsEditing(false);
        } catch (error) {
            setError('Failed to update profile');
        }
    };

    const handleEditClick = () => {
        setIsEditing(true);
    };

    return (
        <div className="settings-page">
            <div className="bg-gray-100 dark:bg-gray-800 transition-colors duration-300">
                <div className="container mx-auto p-4">
                    <div className="bg-black dark:bg-gray-700 shadow rounded-lg p-6">
                        <h1 className="text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100">Personal Information</h1>
                        <p className="text-gray-600 dark:text-gray-300 mb-6">Use a permanent address where you can receive mail.</p>
                        <form onSubmit={handleFormSubmit}>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <input
                                    type="text"
                                    name="firstName"
                                    placeholder="First name"
                                    value={userData.firstName}
                                    onChange={handleInputChange}
                                    className="border p-2 rounded w-full"
                                />
                                <input
                                    type="text"
                                    name="lastName"
                                    placeholder="Last name"
                                    value={userData.lastName}
                                    onChange={handleInputChange}
                                    className="border p-2 rounded w-full"
                                />
                            </div>
                            <div className="mb-4">
                                <input
                                    type="email"
                                    name="email"
                                    placeholder="Email address"
                                    value={userData.email}
                                    onChange={handleInputChange}
                                    className="border p-2 rounded w-full"
                                />
                            </div>
                            <div className="mb-4">
                                <input
                                    type="text"
                                    name="address"
                                    placeholder="Street address"
                                    value={userData.address}
                                    onChange={handleInputChange}
                                    className="border p-2 rounded w-full"
                                />
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                                <input
                                    type="text"
                                    name="city"
                                    placeholder="City"
                                    className="border p-2 rounded w-full"
                                />
                                <input
                                    type="text"
                                    name="state"
                                    placeholder="State / Province"
                                    className="border p-2 rounded w-full"
                                />
                                <input
                                    type="text"
                                    name="zip"
                                    placeholder="ZIP / Postal code"
                                    className="border p-2 rounded w-full"
                                />
                            </div>
                            <button
                                type="button"
                                id="theme-toggle"
                                className="px-4 py-2 rounded bg-blue-500 text-black hover:bg-blue-600 focus:outline-none transition-colors"
                            >
                                Toggle Theme
                            </button>
                            <button
                                type="submit"
                                className="px-4 py-2 rounded bg-green-500 text-black hover:bg-green-600 focus:outline-none transition-colors ml-2"
                            >
                                Save
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Settings;










import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../../Components/Tailwind/tailwind.css';
import './Settings.css';

const Settings = () => {
    const [userData, setUserData] = useState({
        firstName: '',
        lastName: '',
        email: '',
        address: '',
        bDate: '',
        password: ''
    });
    const [isEditing, setIsEditing] = useState(false);
    const [error, setError] = useState(null);
    const [message, setMessage] = useState('');

    useEffect(() => {
        fetchUserProfile();
    }, []);

    const fetchUserProfile = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await axios.get('http://127.0.0.1:4000/getUserData', {
                headers: { Authorization: `Bearer ${token}` }
            });
            console.log("k: ",response);
            console.log("aa: ",response.data);

            if (response.data) {

            setUserData(response.data.data);
            }else {
                setError('User profile not found');
            }
        } catch (error) {
            setError('Failed to fetch user profile');
        }
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setUserData({ ...userData, [name]: value });
    };

    const handleFormSubmit = async (e) => {
        e.preventDefault();
        try {
            const token = localStorage.getItem('token');
            await axios.put('http://127.0.0.1:4000/editUser', userData, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setMessage('Profile updated successfully');
            setIsEditing(false);
        } catch (error) {
            setError('Failed to update profile');
        }
    };

    const handleEditClick = () => {
        setIsEditing(true);
    };

    return (
        <div className="settings-page">


            

            
        


            {console.log("h  ",userData)}
            <h2 className="text-2xl font-bold mb-4">User Profile</h2>
            {error && <p className="text-red-500">{error}</p>}
            {message && <p className="text-green-500">{message}</p>}
            {!isEditing && userData.length>0? (
                <div>
                    <p><strong>First Name:</strong> {userData[0].firstName}</p>
                    <p><strong>Last Name:</strong> {userData[0].lastName}</p>
                    <p><strong>Email:</strong> {userData[0].email}</p>
                    <p><strong>Address:</strong> {userData[0].address}</p>
                    <p><strong>Birth Date:</strong> {userData[0].bDate.slice(0,10)}</p>
                    <button className="bg-blue-500 text-white p-2 rounded mt-4" onClick={handleEditClick}>Edit Profile</button>
                </div>
            ) : (
                <form onSubmit={handleFormSubmit}>
                    <div className="mb-4">
                        <label className="block text-gray-700">First Name</label>
                        <input
                            type="text"
                            name="firstName"
                            value={userData.firstName}
                            onChange={handleInputChange}
                            className="w-full p-2 border border-gray-300 rounded"
                        />
                    </div>
                    <div className="mb-4">
                        <label className="block text-gray-700">Last Name</label>
                        <input
                            type="text"
                            name="lastName"
                            value={userData.lastName}
                            onChange={handleInputChange}
                            className="w-full p-2 border border-gray-300 rounded"
                        />
                    </div>
                    <div className="mb-4">
                        <label className="block text-gray-700">Email</label>
                        <input
                            type="email"
                            name="email"
                            value={userData.email}
                            onChange={handleInputChange}
                            className="w-full p-2 border border-gray-300 rounded"
                        />
                    </div>
                    <div className="mb-4">
                        <label className="block text-gray-700">Address</label>
                        <input
                            type="text"
                            name="address"
                            value={userData.address}
                            onChange={handleInputChange}
                            className="w-full p-2 border border-gray-300 rounded"
                        />
                    </div>
                    <div className="mb-4">
                        <label className="block text-gray-700">Birth Date</label>
                        <input
                            type="date"
                            name="bDate"
                            value={userData.bDate}
                            onChange={handleInputChange}
                            className="w-full p-2 border border-gray-300 rounded"
                        />
                    </div>
                    <div className="mb-4">
                        <label className="block text-gray-700">Password</label>
                        <input
                            type="password"
                            name="password"
                            value={userData.password}
                            onChange={handleInputChange}
                            className="w-full p-2 border border-gray-300 rounded"
                        />
                    </div>
                    <button type="submit" className="bg-blue-500 text-white p-2 rounded">Save Changes</button>
                </form>
            )}
        </div>
    );
};

export default Settings;



     <div className="settings-page">
                <aside class="group/sidebar flex flex-col shrink-0 lg:w-[300px] w-[250px] transition-all duration-300 ease-in-out -translate-x-full lg:translate-x-0 m-0 fixed z-40 inset-y-0 left-0 lg:bg-light/30 bg-light border-r border-r-dashed border-r-neutral-200 sidenav fixed-start loopple-fixed-start" id="sidenav-main">
    <div class="h-full bg-neutral-900">
        <div class="flex shrink-0 px-8 items-center justify-between h-[96px]">
                <img alt="Logo" src="https://raw.githubusercontent.com/Loopple/loopple-public-assets/main/riva-dashboard-tailwind/img/logos/loopple.svg" class="inline"/>
            <div class="relative ml-5 group">
                <a href="javascript:void(0)" class="lg:hidden flex" onclick="(function(){document.querySelector('.group\\/sidebar').classList.toggle('-translate-x-full');})();">
                    <span class="p-0 m-0 -mr-1 leading-none shrink-0 rounded-[.195rem] text-secondary-dark  group-hover:text-primary group-[.open]:text-primary">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </span>
                </a>
            </div>
        </div>
        <div class="hidden border-b border-dashed lg:block border-neutral-700/70"></div>
        <div class="flex items-center justify-between px-8 py-5">
            <div class="flex items-center mr-5">
                <div class="mr-5">
                    <div class="inline-block relative shrink-0 cursor-pointer rounded-xl">
                        <img class="w-[40px] h-[40px] shrink-0 inline-block rounded-xl" src="https://raw.githubusercontent.com/Loopple/loopple-public-assets/main/riva-dashboard-tailwind/img/avatars/avatar1.jpg" alt="avatar image" />
                    </div>
                </div>
                <div class="mr-2 ">
                    <a href="javascript:void(0)" class="dark:hover:text-primary hover:text-primary transition-colors duration-200 ease-in-out text-[1.075rem] font-medium  dark:text-neutral-400/90 text-white/90 hover:text-white" >{userData && userData[0].firstName+" "+userData[0].lastName}</a>
                    <span class="text-secondary-dark dark:text-muted font-medium block text-[0.95rem] ">{userData && userData[0].userType}</span>
                </div>
            </div>
            <Link to={'/Settings'} className="inline-flex relative items-center group justify-end text-base font-medium leading-normal text-center align-middle cursor-pointer rounded-xl transition-colors duration-150 ease-in-out text-dark bg-transparent shadow-none border-0" >
                <span class="leading-none transition-colors duration-200 ease-in-out peer shrink-0 group-hover:text-white text-secondary-dark">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 011.37.49l1.296 2.247a1.125 1.125 0 01-.26 1.431l-1.003.827c-.293.24-.438.613-.431.992a6.759 6.759 0 010 .255c-.007.378.138.75.43.99l1.005.828c.424.35.534.954.26 1.43l-1.298 2.247a1.125 1.125 0 01-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 01-.22.128c-.331.183-.581.495-.644.869l-.213 1.28c-.09.543-.56.941-1.11.941h-2.594c-.55 0-1.02-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 01-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 01-1.369-.49l-1.297-2.247a1.125 1.125 0 01.26-1.431l1.004-.827c.292-.24.437-.613.43-.992a6.932 6.932 0 010-.255c.007-.378-.138-.75-.43-.99l-1.004-.828a1.125 1.125 0 01-.26-1.43l1.297-2.247a1.125 1.125 0 011.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.087.22-.128.332-.183.582-.495.644-.869l.214-1.281z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                </span>
            </Link>
        </div>
        <div class="hidden border-b border-dashed lg:block border-neutral-700/70"></div>
        <div class="relative pl-3 overflow-y-scroll">
            <div class="flex flex-col w-full font-medium">
                {/* <!-- menu item --> */}
                <div>
                    <span class="select-none flex items-center px-4 py-3 cursor-pointer my-[.4rem] rounded-xl">
                        <Link to={'/Home'} class="flex items-center flex-grow text-[1.15rem] dark:text-neutral-400/75 text-muted hover:text-white">Home</Link>
                    </span>
                </div>
                {/* <!-- menu item --> */}
                <div>
                    <span class="select-none flex items-center px-4 py-3 cursor-pointer my-[.4rem] rounded-xl">
                        <a href="javascript:;" class="flex items-center flex-grow text-[1.15rem] dark:text-neutral-400/75 text-muted hover:text-white">Calendar</a>
                    </span>
                </div>
                {/* <!-- menu item --> */}
                <div>
                    <span class="select-none flex items-center px-4 py-3 cursor-pointer my-[.4rem] rounded-xl">
                        <a href="javascript:;" class="flex items-center flex-grow text-[1.15rem] dark:text-neutral-400/75 text-muted hover:text-white">Settings</a>
                    </span>
                </div>
                {/* <!-- menu item --> */}
                <div class="block pt-5 pb-[.15rem]">
                    <div class="px-4 py-[.65rem]">
                        <span class="font-semibold text-[0.95rem] uppercase dark:text-neutral-500/80 text-white/90">More</span>
                    </div>
                </div>
                {/* <!-- menu item --> */}
                <div>
                    <span class="select-none flex items-center px-4 py-3 cursor-pointer my-[.4rem] rounded-xl">
                        <a href="javascript:;" class="flex items-center flex-grow text-[1.15rem] dark:text-neutral-400/75 text-muted hover:text-white">Activity</a>
                    </span>
                </div>
                {/* <!-- menu item --> */}
                <div>
                    <span class="select-none flex items-center px-4 py-3 cursor-pointer my-[.4rem] rounded-xl">
                        
                        <Link to={'/AddTask'} class="flex items-center flex-grow text-[1.15rem] dark:text-neutral-400/75 text-muted hover:text-white">Tasks</Link>
                    </span>
                </div>
                {/* <!-- menu item --> */}
                <div>
                    <span class="select-none flex items-center px-4 py-3 cursor-pointer my-[.4rem] rounded-xl">
                        <a href="javascript:;" class="flex items-center flex-grow text-[1.15rem] dark:text-neutral-400/75 text-muted hover:text-white">Account</a>
                    </span>
                </div>
                {/* <!-- menu item --> */}
                <div>
                    <span class="select-none flex items-center px-4 py-3 cursor-pointer my-[.4rem] rounded-xl">
                        <a href="javascript:;" class="flex items-center flex-grow text-[1.15rem] dark:text-neutral-400/75 text-muted hover:text-white">Log Out</a>
                    </span>
                </div>
            </div>
        </div>
    </div>
</aside>